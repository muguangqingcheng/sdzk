"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _px = require("../../common/utils/px");

var _index = require("../../common/utils/index");

/**
 * @file 下拉刷新
 * @author LipengJia (jialipeng@baidu.com)
 * @date 2019-12-19
 */
var STATUS = {
  IDLE: 0,
  LOADING: 1,
  SHOWTEXT: 2
};
Component({
  externalClasses: ['smt-feed-container', 'smt-feed-loading', 'smt-feed-content', 'smt-refresh-circle-left', 'smt-refresh-circle-right', 'smt-refresh-result-container', 'smt-refresh-result-text'],
  properties: {
    // 是否开启下拉刷新
    pullToRefresh: {
      type: Boolean,
      value: false
    },
    // loading加载区域高度 * 必须是device px
    loadingHeight: {
      type: Number,
      value: (0, _px.upx2dpx)(192),
      observer: function observer(n) {
        if (typeof n !== 'number') {
          throw 'loadingHeight 必须是数字类型!否则下拉可造成卡顿闪屏';
        }
      }
    },
    // 距底部距离 触发 scrolltolower 事件
    lowerThreshold: {
      type: Number,
      value: 50
    },
    // 加载成功话术 * 不要默认值，prop抖动
    text: {
      type: String,
      value: '',
      observer: function observer(n) {
        this.clipText(n);
      }
    },
    // 加载话术停留时间 * 用于单测
    textStayTime: {
      type: Number,
      value: 800
    },
    // 主题定义
    theme: {
      type: String,
      value: ''
    },
    // 禁止下拉 * 场景：处于滚动页面且api加载(demo示例平台)
    disableTouch: {
      type: Boolean,
      value: false
    }
  },
  data: {
    // 左右小球信息
    circle: {
      // 小球尺寸 * device px防止变形
      size: (0, _px.upx2dpx)(21),
      // 小球移动距离
      offsetX: (0, _px.upx2dpx)(33),
      // 左右渐隐（有先后）
      opacityL: 0,
      opacityR: 0,
      // 左右距离（有先后）
      xL: 0,
      xR: 0
    },
    // 是否禁用scrollView
    enableScroll: true,
    // 滑动距离
    offsetY: 0,
    // 滑动区域高度，用于计算阻尼值
    clientHeight: 0,
    // 最长18个汉字
    clipedText: '',
    // 0: 未开始 1: 加载中 2: 展示话术
    status: STATUS.IDLE,
    // 滚动高度
    scrollTop: 0
  },
  methods: {
    /**
     * 截取18位文字
     * @param {string} str 传入的文字
     */
    clipText: function clipText(str) {
      this.setData({
        clipedText: str.slice(0, 18)
      });
    },

    /**
     * scrollView 滚动参数
     * @param {Object} param Event
     */
    scrollHdl: function scrollHdl(_ref) {
      var _this = this;

      var detail = _ref.detail;
      this.scrollTop = detail.scrollTop; // 如果是ios惯性，就禁掉回弹

      if (this.data.pullToRefresh && this.scrollTop < 0 && this.data.enableScroll && this.offsetY === 0) {
        this.setData({
          enableScroll: false
        }, function () {
          _this.setData({
            enableScroll: true
          });
        });
      }

      this.triggerEvent('scroll', detail);
    },

    /**
     * 阻尼值转换 * 四参方程有常数，便于转换屏幕比
     * 两种情况： 滚动区域 > 400 ? 用系数 = .7 : .65
     * x: 0, 50, 100, 150, 200, 250, 300, 350, 400, 800, 40000, 120000
     * y: 0,32,62,90,115,136,153,164,170,270, 420, 440
     *
     * @param {number} pullDistance 下拉的总距离
     * @param {number=} base 基础值，calc(iphone 8p - 40px)
     * @return {number} 返回值
     */
    dumping: function dumping(offsetY) {
      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 464;
      var y = offsetY > 0 ? offsetY : 0;
      var ratio = this.data.clientHeight / base;
      var result = 0;

      if (this.data.clientHeight > 400) {
        // 系数 .65
        result = (440.5 + .5) * ratio / (1 + Math.pow(y / 551.5665, -1.009)) - .5;
      } else {
        // 系数 .7
        result = (440.0483 + .0510) * ratio / (1 + Math.pow(y / 444.0544, -1.2801)) - .0510;
      }

      return Math.round(result);
    },
    touchHdl: function () {
      var _touchHdl = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee(_ref2) {
        var _this2 = this;

        var type, _ref2$touches, touches, _ref2$changedTouches, changedTouches, _ref2$manual, manual, disabled, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, touch, id, pageY, distance, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _touch, _id, _pageY, offsetY, pullDown, circleInfo, setOffsetY, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _touch2, _id2, _pageY2, shouldLoad, result;

        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                type = _ref2.type, _ref2$touches = _ref2.touches, touches = _ref2$touches === void 0 ? [] : _ref2$touches, _ref2$changedTouches = _ref2.changedTouches, changedTouches = _ref2$changedTouches === void 0 ? [] : _ref2$changedTouches, _ref2$manual = _ref2.manual, manual = _ref2$manual === void 0 ? false : _ref2$manual;

                if (!(this.closing || this.data.disableTouch && !manual)) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return");

              case 3:
                // ue规定： 如果api调用下拉刷新，则不启用手势刷新
                disabled = !this.data.pullToRefresh && !manual && this.status === STATUS.IDLE; // 禁用多点触控

                _context.t0 = type;
                _context.next = _context.t0 === 'touchstart' ? 7 : _context.t0 === 'touchmove' ? 37 : _context.t0 === 'touchend' ? 71 : 100;
                break;

              case 7:
                this.touching = true;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 11;
                _iterator = touches[Symbol.iterator]();

              case 13:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 22;
                  break;
                }

                touch = _step.value;
                id = touch.identifier, pageY = touch.pageY;

                if (!(this.pos[id] == null)) {
                  _context.next = 19;
                  break;
                }

                this.pos[id] = pageY + this.scrollTop;
                return _context.abrupt("break", 22);

              case 19:
                _iteratorNormalCompletion = true;
                _context.next = 13;
                break;

              case 22:
                _context.next = 28;
                break;

              case 24:
                _context.prev = 24;
                _context.t1 = _context["catch"](11);
                _didIteratorError = true;
                _iteratorError = _context.t1;

              case 28:
                _context.prev = 28;
                _context.prev = 29;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 31:
                _context.prev = 31;

                if (!_didIteratorError) {
                  _context.next = 34;
                  break;
                }

                throw _iteratorError;

              case 34:
                return _context.finish(31);

              case 35:
                return _context.finish(28);

              case 36:
                return _context.abrupt("break", 100);

              case 37:
                distance = 0;
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context.prev = 41;

                for (_iterator2 = touches[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  _touch = _step2.value;
                  _id = _touch.identifier, _pageY = _touch.pageY;

                  if (this.pos[_id]) {
                    distance += Math.round(_pageY - this.pos[_id]);
                  }
                }

                _context.next = 49;
                break;

              case 45:
                _context.prev = 45;
                _context.t2 = _context["catch"](41);
                _didIteratorError2 = true;
                _iteratorError2 = _context.t2;

              case 49:
                _context.prev = 49;
                _context.prev = 50;

                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }

              case 52:
                _context.prev = 52;

                if (!_didIteratorError2) {
                  _context.next = 55;
                  break;
                }

                throw _iteratorError2;

              case 55:
                return _context.finish(52);

              case 56:
                return _context.finish(49);

              case 57:
                offsetY = this.offsetY = this.dumping(distance + this.lastOffsetY);
                pullDown = distance > 0; // 没loading动画时下拉计算动画

                if (this.status === STATUS.IDLE) {
                  circleInfo = (0, _index.calcCircle)(offsetY, this.data.loadingHeight);
                  circleInfo && this.setData(circleInfo);
                } // 还未加载时，向上划要收起loading


                if (!(!pullDown && this.status !== STATUS.IDLE && Math.abs(offsetY) > 20)) {
                  _context.next = 67;
                  break;
                }

                this.fadeCircle();
                this.setData({
                  status: STATUS.IDLE,
                  offsetY: 0
                });
                this.status = STATUS.IDLE;
                this.triggerEvent('statuschange', STATUS.IDLE);
                this.lastOffsetY = this.offsetY = 0;
                return _context.abrupt("return");

              case 67:
                if (!disabled) {
                  _context.next = 69;
                  break;
                }

                return _context.abrupt("return");

              case 69:
                // offsetY快，setData慢，可能造成向上划没到顶。
                // 要注意 初始就向下划，过滤掉
                if (offsetY > 0 || this.data.offsetY > 0) {
                  setOffsetY = function setOffsetY() {
                    return _this2.setData({
                      offsetY: offsetY
                    });
                  }; // 如果已经禁止滚动&&还往下拉，直接赋值


                  if (!this.data.enableScroll) {
                    setOffsetY();
                  } else {
                    this.setData({
                      // 该setData 不会多次执行
                      enableScroll: false
                    }, setOffsetY);
                  }
                }

                return _context.abrupt("break", 100);

              case 71:
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context.prev = 74;

                for (_iterator3 = changedTouches[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  _touch2 = _step3.value;
                  _id2 = _touch2.identifier, _pageY2 = _touch2.pageY;

                  if (this.pos[_id2]) {
                    this.lastOffsetY += _pageY2 - this.pos[_id2];
                  }
                }

                _context.next = 82;
                break;

              case 78:
                _context.prev = 78;
                _context.t3 = _context["catch"](74);
                _didIteratorError3 = true;
                _iteratorError3 = _context.t3;

              case 82:
                _context.prev = 82;
                _context.prev = 83;

                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }

              case 85:
                _context.prev = 85;

                if (!_didIteratorError3) {
                  _context.next = 88;
                  break;
                }

                throw _iteratorError3;

              case 88:
                return _context.finish(85);

              case 89:
                return _context.finish(82);

              case 90:
                if (!(touches.length || disabled)) {
                  _context.next = 92;
                  break;
                }

                return _context.abrupt("return");

              case 92:
                this.touching = false;
                this.pos = {}; // 判断是否加载

                shouldLoad = this.scrollTop <= 0 && this.offsetY >= this.data.loadingHeight;
                result = 0;

                if (shouldLoad) {
                  // 只有status === 0时，触发加载
                  if (this.status === STATUS.IDLE) {
                    this.triggerEvent('refresh');
                    this.setData({
                      status: STATUS.LOADING
                    });
                    this.status = STATUS.LOADING;
                    this.triggerEvent('statuschange', STATUS.LOADING);
                  }

                  this.startRefreshTime = Date.now();
                  result = this.data.loadingHeight;
                } else {
                  this.fadeCircle();
                }

                this.setData({
                  enableScroll: true
                }, function () {
                  _this2.setData({
                    offsetY: result
                  });
                });
                this.lastOffsetY = this.offsetY = result;
                return _context.abrupt("break", 100);

              case 100:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[11, 24, 28, 36], [29,, 31, 35], [41, 45, 49, 57], [50,, 52, 56], [74, 78, 82, 90], [83,, 85, 89]]);
      }));

      function touchHdl(_x) {
        return _touchHdl.apply(this, arguments);
      }

      return touchHdl;
    }(),

    /**
     * circle渐隐
     */
    fadeCircle: function fadeCircle() {
      var _this3 = this;

      return (0, _index.linearAccu)(function (y, callback) {
        var circleInfo = (0, _index.calcCircle)(y, _this3.data.loadingHeight);

        if (circleInfo) {
          _this3.setData(circleInfo, callback);
        } else {
          callback();
        }
      }, this.data.loadingHeight, 0);
    },

    /**
     * 渐隐loadingbar
     */
    closeLoading: function () {
      var _closeLoading = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // 防止关闭后，touchend还在触发中
                this.closing = true;
                this.debCloseLoading.cancel();

                if (this.data.enableScroll) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 5;
                return (0, _index.syncSetData)(this, {
                  enableScroll: true
                });

              case 5:
                _context2.next = 7;
                return (0, _index.syncSetData)(this, {
                  offsetY: 0
                });

              case 7:
                _context2.next = 9;
                return new Promise(function (r) {
                  return setTimeout(r, 200);
                });

              case 9:
                _context2.next = 11;
                return (0, _index.syncSetData)(this, {
                  status: STATUS.IDLE
                });

              case 11:
                this.triggerEvent('statuschange', STATUS.IDLE);
                this.status = STATUS.IDLE;
                this.lastOffsetY = this.offsetY = 0;
                this.closing = false;

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function closeLoading() {
        return _closeLoading.apply(this, arguments);
      }

      return closeLoading;
    }(),

    /**
     * 调用模拟下拉刷新
     */
    startRefresh: function () {
      var _startRefresh = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3() {
        var _this4 = this;

        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.status !== STATUS.IDLE)) {
                  _context3.next = 4;
                  break;
                }

                this.debCloseLoading.cancel();
                _context3.next = 4;
                return this.closeLoading();

              case 4:
                this.status = STATUS.LOADING;
                this.setData({
                  enableScroll: false,
                  status: STATUS.LOADING
                }, function () {
                  if (_this4.closing) {
                    return;
                  }

                  _this4.offsetY = _this4.data.loadingHeight;

                  _this4.touchHdl({
                    type: 'touchend',
                    manual: true
                  });
                });
                this.triggerEvent('statuschange', STATUS.LOADING);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function startRefresh() {
        return _startRefresh.apply(this, arguments);
      }

      return startRefresh;
    }(),

    /**
     * 停止当前刷新
     */
    stopRefresh: function () {
      var _stopRefresh = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee4() {
        var time;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                // 用户下拉，至少保证小球转1圈
                time = 500 - (Date.now() - this.startRefreshTime);
                time = time > 0 ? time : 0;
                _context4.next = 4;
                return new Promise(function (r) {
                  return setTimeout(r, time);
                });

              case 4:
                this.status = STATUS.SHOWTEXT;
                this.setData({
                  status: STATUS.SHOWTEXT
                });
                this.triggerEvent('statuschange', STATUS.SHOWTEXT);
                _context4.next = 9;
                return this.debCloseLoading();

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function stopRefresh() {
        return _stopRefresh.apply(this, arguments);
      }

      return stopRefresh;
    }(),

    /**
     * 滚动到底部时触发
     * @param {Object} param detail 事件
     */
    scrollToLower: function scrollToLower(_ref3) {
      var detail = _ref3.detail;
      this.triggerEvent('scrolltolower', detail);
    },
    setScrollTop: function setScrollTop(scrollTop) {
      this.setData({
        scrollTop: scrollTop
      });
    }
  },
  created: function created() {
    var _this5 = this;

    this.setData({
      max: (0, _px.upx2dpx)(this.data.maxDistance)
    });
    this.clipText(this.data.text); // 记录用户下拉开始时间，到加载结束至少保证小球转3圈

    this.startRefreshTime = 0; // 滚动高度，用于计算是否触顶下拉

    this.scrollTop = 0; // 是否有手指在屏幕

    this.touching = false; // 多点触控位置，解决手指交叉切换问题

    this.pos = {}; // 上次结束位置

    this.lastOffsetY = 0; // 手指移动位置 * 用这个来判断是否手机离开屏幕

    this.offsetY = 0; // 0: 未开始 1: 加载中 2: 展示话术

    this.status = STATUS.IDLE; // 是否正在关闭

    this.closing = false; // 循环检测是否要关闭loading

    this.debOffsetCheck = function () {
      return new Promise(function (resolve) {
        var timer = setInterval(function () {
          if (_this5.touching) {
            return;
          }

          clearInterval(timer);
          resolve();
        }, 300);
      });
    }; // 关闭loading bar; text显示时长: 800ms


    this.debCloseLoading = (0, _index.promiseDebounce)(
    /*#__PURE__*/
    (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee5() {
      return _regenerator["default"].wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this5.debOffsetCheck();

            case 2:
              _context5.next = 4;
              return new Promise(function (r) {
                return setTimeout(r, _this5.data.textStayTime);
              });

            case 4:
              _context5.next = 6;
              return _this5.closeLoading();

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    })), 100);
  },
  ready: function ready() {
    var _this6 = this;

    // 计算滑动区域高度，用于计算阻尼值
    swan.createSelectorQuery()["in"](this).select('.smt-feed-wrap').boundingClientRect(function (res) {
      try {
        if (!res) {
          throw '未找到节点';
        }

        var clientHeight = res.height;

        _this6.setData({
          clientHeight: clientHeight
        });
      } catch (err) {
        console.error('获取节点信息错误');
      }
    }).exec();
  }
});